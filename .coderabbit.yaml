# CodeRabbit Configuration for RP2040 Keyboard Converter
# Complete reference: https://docs.coderabbit.ai/reference/configuration

# =============================================================================
# GLOBAL SETTINGS
# =============================================================================

language: "en-GB"

# Set assertive profile for embedded systems - we need strict reviews
reviews:
  profile: "assertive"
  
  # Generate comprehensive review summaries
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  
  # Enable all walkthrough features
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  estimate_code_review_effort: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  
  # Label management
  suggested_labels: true
  auto_apply_labels: true
  labeling_instructions:
    - label: "bug"
      instructions: "Apply for bug fixes or issues"
    - label: "enhancement"
      instructions: "Apply for new features or improvements"
    - label: "performance"
      instructions: "Apply for performance optimisations"
    - label: "protocol"
      instructions: "Apply for protocol implementation changes"
    - label: "hardware"
      instructions: "Apply for hardware-related changes"
    - label: "documentation"
      instructions: "Apply for documentation updates"
    - label: "ci"
      instructions: "Apply for CI/CD changes"
    - label: "breaking-change"
      instructions: "Apply for breaking changes"
  
  # Reviewer suggestions (but don't auto-assign for small projects)
  suggested_reviewers: true
  auto_assign_reviewers: false
  
  # Path filters - focus on source code, exclude generated files
  path_filters:
    # Include
    - "src/**"
    - "tools/**"
    - ".github/**"
    - "CMakeLists.txt"
    - "*.cmake"
    - "*.md"
    - "Dockerfile"
    - "docker-compose.yml"
    
    # Exclude
    - "!build/**"
    - "!docs-internal/**"  # Never review local-only docs
    - "!external/**"       # Pico SDK submodule
    - "!*.uf2"            # Binary firmware files
    - "!*.elf"            # Binary firmware files
    - "!*.map"            # Linker map files
    - "!compile_commands.json"  # Generated by CMake
  
  # Path-specific instructions
  path_instructions:
    - path: "src/protocols/**"
      instructions: |
        - Verify PIO state machines maintain microsecond timing precision
        - Check IRQ handlers are non-blocking (no sleep, no printf, no loops)
        - Confirm ring buffer is used correctly (IRQ writes only)
        - Validate memory barriers (__dmb()) after volatile writes
        - Ensure all protocol timing matches specification in README.md
    
    - path: "src/common/lib/ringbuf.*"
      instructions: |
        - CRITICAL: This is a lock-free single-producer/single-consumer ring buffer
        - Verify ringbuf_reset() is never called with IRQs enabled
        - Check atomic head/tail updates
        - Validate overflow/underflow handling
    
    - path: "src/common/lib/hid_interface.*"
      instructions: |
        - Always verify tud_hid_ready() check before sending reports
        - Validate USB descriptor matches report structure
        - Check for proper NKRO (N-Key Rollover) handling
    
    - path: "src/**/*.c"
      instructions: |
        - CRITICAL: No blocking operations (sleep_ms, sleep_us, busy_wait_*)
        - CRITICAL: No multicore APIs (multicore_*, core1_*)
        - CRITICAL: No printf/fprintf in IRQ context (use LOG_* macros)
        - Use to_ms_since_boot(get_absolute_time()) for non-blocking timing
        - Verify code runs from RAM, not Flash
        - Check for proper volatile + memory barrier usage with IRQ-shared data
    
    - path: "src/**/*.pio"
      instructions: |
        - Validate PIO timing matches protocol specifications
        - Check clock divider calculations
        - Verify state machine transitions
        - Ensure proper synchronization between PIO and CPU
    
    - path: ".github/workflows/**"
      instructions: |
        - Verify all keyboard configurations in build matrix are valid paths
        - Check artifact naming sanitizes special characters
        - Validate memory extraction uses correct toolchain
        - Ensure CI checks enforce memory limits (Flash<230KB, RAM<150KB)
    
    - path: "CMakeLists.txt"
      instructions: |
        - Verify pico_set_binary_type(copy_to_ram) is set
        - Check proper linking of protocol/keyboard/scancode modules
        - Validate PIO header generation
  
  # Auto review configuration
  auto_review:
    enabled: true
    auto_incremental_review: true
    drafts: false  # Don't review drafts
    ignore_title_keywords:
      - "WIP"
      - "wip"
      - "DO NOT MERGE"
      - "DNM"
  
  # Finishing touches
  finishing_touches:
    docstrings:
      enabled: true
    unit_tests:
      enabled: true
  
  # Pre-merge checks
  pre_merge_checks:
    # Strict title requirements
    title:
      mode: "warning"
      requirements: |
        Use conventional commit format: type(scope): description
        Examples:
        - feat(amiga): add A500 keyboard support
        - fix(at-ps2): correct timing for host-to-device commands
        - perf(ringbuf): optimize ring buffer throughput
        - docs: update protocol timing diagrams
        - ci: fix build matrix keyboard paths
    
    # Description check
    description:
      mode: "warning"
    
    # Issue assessment
    issue_assessment:
      mode: "warning"
    
    # Custom checks specific to embedded systems
    custom_checks:
      - name: "No blocking operations"
        instructions: |
          Verify that no blocking operations are introduced:
          - No sleep_ms(), sleep_us(), busy_wait_ms(), busy_wait_us()
          - Exception: Debug code with LINT:ALLOW blocking annotation + IRQ guard
          - Check for while(1) loops without yield points
      
      - name: "No multicore usage"
        instructions: |
          Verify single-core architecture is maintained:
          - No multicore_* functions
          - No core1_* functions
          - All code runs on Core 0 only
      
      - name: "IRQ safety"
        instructions: |
          For any IRQ handler changes:
          - No blocking operations
          - No printf/fprintf (use LOG_* macros)
          - Ring buffer writes only (never reads)
          - Memory barriers after volatile writes
          - Keep handler execution time minimal
      
      - name: "Memory execution"
        instructions: |
          Verify all code runs from RAM, not Flash:
          - Check CMakeLists.txt has pico_set_binary_type(copy_to_ram)
          - Validate no Flash-specific APIs are used incorrectly
      
      - name: "Protocol timing"
        instructions: |
          For protocol implementation changes:
          - Verify timing matches specification (check README.md)
          - Validate PIO clock dividers
          - Check IRQ handler latency
          - Ensure microsecond precision requirements are met
  
  # Tool configuration
  tools:
    # C/C++ analysis
    clang:
      enabled: true
    cppcheck:
      enabled: true
    
    # Shell scripts
    shellcheck:
      enabled: true
    
    # Docker
    hadolint:
      enabled: true
    
    # YAML (workflows, docker-compose)
    yamllint:
      enabled: true
    
    # Markdown
    markdownlint:
      enabled: true
    
    # GitHub Actions
    actionlint:
      enabled: true
    
    # Security scanning
    gitleaks:
      enabled: true
    
    # Makefile linting
    checkmake:
      enabled: true
    
    # AST-grep for custom patterns
    ast-grep:
      essential_rules: true
      rule_dirs: []
      util_dirs: []
    
    # Language tool for documentation
    languagetool:
      enabled: true
      level: "default"
      # Disable some rules for technical documentation
      disabled_categories:
        - "TYPOS"  # Technical terms may not be in dictionary
    
    # GitHub Checks integration
    github-checks:
      enabled: true
      timeout_ms: 720000  # 12 minutes (max is 15 minutes)
    
    # Disable tools not relevant to this project
    ruff:
      enabled: false  # No Python source code
    phpstan:
      enabled: false
    phpmd:
      enabled: false
    phpcs:
      enabled: false
    golangci-lint:
      enabled: false
    detekt:
      enabled: false
    eslint:
      enabled: false
    flake8:
      enabled: false
    rubocop:
      enabled: false
    buf:
      enabled: false
    pmd:
      enabled: false
    semgrep:
      enabled: false
    circleci:
      enabled: false
    clippy:
      enabled: false
    sqlfluff:
      enabled: false
    prismaLint:
      enabled: false
    pylint:
      enabled: false
    oxc:
      enabled: false
    shopifyThemeCheck:
      enabled: false
    luacheck:
      enabled: false
    brakeman:
      enabled: false
    dotenvLint:
      enabled: false
    htmlhint:
      enabled: false
    osvScanner:
      enabled: true  # Security vulnerability scanning
    biome:
      enabled: false
    swiftlint:
      enabled: false
    regal:
      enabled: false

# =============================================================================
# CHAT
# =============================================================================

chat:
  art: true
  auto_reply: true
  
  integrations:
    jira:
      usage: "disabled"  # Not using Jira
    linear:
      usage: "disabled"  # Not using Linear

# =============================================================================
# KNOWLEDGE BASE
# =============================================================================

knowledge_base:
  opt_out: false
  
  # Web search for embedded systems context
  web_search:
    enabled: true
  
  # Code guidelines - CodeRabbit will learn from copilot-instructions.md
  code_guidelines:
    enabled: true
    filePatterns:
      - ".github/copilot-instructions.md"
      - "src/protocols/*/README.md"
      - "src/scancodes/*/README.md"
      - "README.md"
  
  # Learnings scope
  learnings:
    scope: "local"  # Repository-specific for this specialized project
  
  # Issues scope
  issues:
    scope: "local"
  
  # Integrations
  jira:
    usage: "disabled"
  
  linear:
    usage: "disabled"
  
  # Pull requests
  pull_requests:
    scope: "local"
  
  # MCP integration
  mcp:
    usage: "auto"
    disabled_servers: []

# =============================================================================
# CODE GENERATION
# =============================================================================

code_generation:
  # Docstrings
  docstrings:
    language: "en-GB"
    path_instructions:
      - path: "src/**/*.c"
        instructions: |
          Use Doxygen-style comments for functions:
          - Brief description on first line
          - Detailed description if needed
          - @param for parameters
          - @return for return values
          - @note for important notes
          - Include threading/IRQ context information
      
      - path: "src/**/*.h"
        instructions: |
          Use Doxygen-style comments for:
          - File headers with purpose and author
          - Function declarations
          - Struct/enum definitions
          - Macro definitions
  
  # Unit tests
  unit_tests:
    path_instructions:
      - path: "src/**"
        instructions: |
          For embedded systems testing:
          - Focus on state machine logic
          - Test ring buffer overflow/underflow
          - Validate timing calculations
          - Mock hardware interfaces where possible
          - Test error handling paths
