.program keyboard_interface
.wrap_target

; Pins: 0 = data, 1 = clock

init:
    ; Wait until CLK goes high before we continue.  As the Keyboard initialises, this is pulled LOW.
    wait 1 pin 1

check:
    ; Wait for incoming data, but jump to bitLoopOut if the Output Shift Register isn't empty
    jmp !OSRE, bitLoopOut
    jmp pin, check ; Loop back to check if pin high

    ; Receiving Data
    ;    IBM AT:
    ;        ____ 1 _ 2 _ 3 _ 4 _ 5 _ 6 _ 7 _ 8 _ 9 _ A _ B _____
    ;    CLK     \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/
    ;        ___     ___ ___ ___ ___ ___ ___ ___ ___ ___ ________
    ;    DAT    \___/___X___X___X___X___X___X___X___X___/
    ;             S   0   1   2   3   4   5   6   7   P   s

    ; Read Start bit
    in pins, 1
    ; Wait for Clock to go High
    wait 1 pin 1

    ; Set x to 9 (to read in 8 x Data bits, 1 x Parity and 1 x Stop bit)
    set x, 9

bitLoopIn:
    ; Wait for clock signal to go low
    wait 0 pin 1 [1]
    ; Read data pin and store in pins register
    in pins, 1
    ; Wait for clock signal to go high
    wait 1 pin 1
    ; Decrement x and jump back to bitLoopIn if it's not zero
    jmp x--, bitLoopIn

    ; Jump back to check now all data read
    jmp check

bitLoopOut:
    ; Sending Data
    ;    IBM AT:
    ;        __      _ 1 _ 2 _ 3 _ 4 _ 5 _ 6 _ 7 _ 8 _ 9 _ A __ B ____
    ;    CLK   \____/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/  \_/
    ;        ______     ___ ___ ___ ___ ___ ___ ___ ___ ______     ____
    ;    DAT       \___/___X___X___X___X___X___X___X___X___/  \___/
    ;           H    R   0   1   2   3   4   5   6   7   P   s ACK

    ; Set data pin low and configure pins
    set pins, 0
    set pindirs 2 [14]   ; Set data pin to output mode
    set pindirs 1  [1]   ; Set clock pin to input mode
    ; Set x to 8 (to write out 8 Data Bits and 1 Parity Bit)
    set x, 8

bitLoopOutLoop:
    ; Wait for clock signal to go low and start sending bit
    wait 0 pin 1 [1]
    out pins, 1
    ; Wait for clock signal to go high
    wait 1 pin 1
    ; Decrement x and jump back to bitLoopOutLoop if it's not zero
    jmp x--, bitLoopOutLoop

    ; Send stop bit
    wait 0 pin 1 [1]
    set pins, 1
    wait 1 pin 1

    ; Wait for ACK to acknowledge
    set pindirs, 0  ; Set data pin to input mode so we can read ACK

    wait 0 pin 0 [1]
    wait 1 pin 0 [5]

% c-sdk {
static inline void keyboard_interface_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);

  pio_gpio_init(pio, pin);
  pio_gpio_init(pio, pin + 1);

  // Initialise pins in expected state for power up (CLK HIGH, DATA HIGH)
  // As part of initialisation on newer PS2 keyboards which support PS2>USB Dongles,
  // as-per USB spec, both DATA and CLK are low and await device to bring high.
  // AT/PS2 Specification will keep both floating HIGH when power on/connected.
  gpio_pull_up(pin);
  gpio_pull_down(pin + 1);

  pio_sm_config c = keyboard_interface_program_get_default_config(offset);

  sm_config_set_set_pins(&c, pin, 2);

  sm_config_set_jmp_pin(&c, pin + 1);

  sm_config_set_in_pins(&c, pin); // for WAIT
  sm_config_set_in_shift(&c, true, true, 11);

  sm_config_set_out_pins(&c, pin, 2);
  sm_config_set_out_shift(&c, true, true, 9);

  sm_config_set_clkdiv(&c, div);

  pio_set_irq0_source_enabled(pio, pis_sm0_rx_fifo_not_empty + sm, true);

  pio_sm_init(pio, sm, offset, &c);

  pio_sm_set_enabled(pio, sm, true);
}
%}