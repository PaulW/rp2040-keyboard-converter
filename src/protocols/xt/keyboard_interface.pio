.program keyboard_interface
.wrap_target

; Pins: 0 = data, 1 = clock

init:
    ; Wait for CLK to go HIGH.  At power on, CLOCK is always LOW then brought HIGH.
    wait 1 pin 1 [1]

pwrOnCheck:
    ; Now check if DATA is HIGH.  During power on INIT, CLOCK is brought high, but then
    ; DATA is brought high for ~500ms, before going LOW.  If we are resetting following a
    ; SOFT reset, then DATA will already be low.

    ; Read in DATA line
    mov isr null
    in pins, 1

    ; If Data is LOW, skip ahead to softReset
    mov y, isr
    jmp !y softReset

    ; DATA still likely HIGH, so loop back around to check.
    jmp pwrOnCheck

softReset:
    ; Firstly, clear our internal ISR of the previous testing bit.
    mov isr null

    ; To instruct the XT Keyboard to perform a Soft Reset, the host must inhibit CLOCK
    ; for around 20ms or so. The Keyboard will ACK the reset request by bringing DATA HIGH
    ; at which point we can safely release CLOCK to the keyboard to control.

    ; On Genuine XT Keyboards, once CLOCK is released, the keyboard will strobe CLOCK to issue
    ; a pseudo start bit while keeping DATA HIGH, which interprets as 0xFF.  Clone XT Keyboards
    ; (at least ones tested) appear to not follow this behaviour and simply bring CLOCK HIGH.

    ; The Keyboard then brings DATA LOW and starts its own self test routines.  At this point
    ; we cam safely assume that the next bytecode received from the Keyboard will either signal
    ; a successful self test (BAT) by sending 0xAA.
    
    ; If we recieve anything other than 0xAA, or if we hit some timeout condition where we don't
    ; receive a response within a set period of time, the State Machine will be reset, causing
    ; this PIO code to be restarted.  This step is handled out side of the PIO Code, but is
    ; commented here for clarity.

    ; Let's inhibit CLOCK and force it low to initiate a Soft Reset.
    set pindirs 2 [1]   ; Set CLOCK pin to Output Mode
    set pins, 0         ; Set CLOCK to LOW to signal Soft Reset Request

    ; As described above, let's now wait for DATA to be brought HIGH to signify the Keyboard
    ; has acknowledged the Soft Reset.
    wait 1 pin 0 [1]

    ; Now set both CLOCK and DATA to Input Modes to allow both to be driven
    ; by the keyboard.
    set pindirs 1  [1]   ; Set clock pin to input mode
    set pindirs, 0       ; Set data pin to input mode so we can read ACK

    ; To avoid reading in the pseudo-start bit, we want to wait until DATA is released LOW again
    wait 0 pin 0 [1]

check:
    ; Wait for incoming data
    jmp pin, check ; Loop back to check if CLK is high

    ; Receiving Data
    ;    IBM XT(Two start bits):
    ;        ____       _ 1 _ 2 _ 3 _ 4 _ 5 _ 6 _ 7 _ 8 _ 9 _______
    ;    CLK     \_____/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/   
    ;                 _____ ___ ___ ___ ___ ___ ___ ___ ___
    ;    DAT ________/     \___X___X___X___X___X___X___X___\_______
    ;            ^   ^  S    0   1   2   3   4   5   6   7
    ;            RTS CTS
    ;
    ;    XT Clones(One start bit):
    ;        ____________ 1 _ 2 _ 3 _ 4 _ 5 _ 6 _ 7 _ 8 _ 9 _______
    ;    CLK             \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/     
    ;        ______________ ___ ___ ___ ___ ___ ___ ___ ___ _______
    ;    DAT               \___X___X___X___X___X___X___X___/
    ;                   S    0   1   2   3   4   5   6   7

    ; Check if Data is LOW straight away, if it is then we are likely a Genuine XT and not a Clone
    ; We may see some wobble if timings aren't precise or if we have some other delay, so this needs
    ; more investigation.
    in pins, 1

    ; If Data is LOW on first Clock LOW signal, we likely have 2 start bits.
    mov y, isr
    jmp !y genXT

    ; We only get here if DATA was HIGH (so not indicitave of a single start bit)
    jmp bitLoopInFunc

genXT:
    ; This only occurs if we seem to match conditions of being a Genuine XT compatible board (CLK LOW, DATA LOW)
    ; As such, this portion allows us to disregard the 'first' start bit, and read the 'second' one as fact.
    ; Clear isr, we dont want to store the previous 'first' start bit.
    mov isr null
    ; Wait for clock to go HIGH again and read the 'proper' Start Bit (CTS not RTS) once low.
    wait 1 pin 1
    wait 0 pin 1 [1]
    in pins, 1

bitLoopInFunc:
    ; We should be starting now from CLK(1) being LOW
    ; Wait for CLK High and read data
    wait 1 pin 1
    ; Set x to 7 (to read in 8 x Data bits)
    set x, 7

bitLoopIn:
    ; Wait for clock signal to go low (1 cycle delay)
    wait 0 pin 1 [1]
    ; Read data on Clock Rising Edge
    in pins, 1
    ; Wait for clock signal to go high
    wait 1 pin 1
    ; Decrement x and jump back to bitLoopIn if it's not zero
    jmp x--, bitLoopIn

    ; Jump back to check now all data read
    jmp check

% c-sdk {
static inline void keyboard_interface_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
  pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);

  pio_gpio_init(pio, pin);
  pio_gpio_init(pio, pin + 1);

  // Ensure we pull both DATA and CLOCK LOW during power on, keyboard will bring both HIGH
  // during power-on and then bring DATA LOW once BAT completes.  However, Keyboard will NOT
  // send 0xAA (BAT OK) after this state and relies on host sending Soft Reset request.
  // Soft Reset request is handles at the start of the PIO Program itself.
  gpio_pull_down(pin);
  gpio_pull_down(pin + 1);

  pio_sm_config c = keyboard_interface_program_get_default_config(offset);

  sm_config_set_set_pins(&c, pin, 2);

  sm_config_set_jmp_pin(&c, pin + 1);

  sm_config_set_in_pins(&c, pin); // for WAIT
  sm_config_set_in_shift(&c, true, true, 9);

  sm_config_set_out_pins(&c, pin, 2);

  sm_config_set_clkdiv(&c, div);

  pio_set_irq0_source_enabled(pio, pis_sm0_rx_fifo_not_empty + sm, true);

  pio_sm_init(pio, sm, offset, &c);

  pio_sm_set_enabled(pio, sm, true);
}
%}